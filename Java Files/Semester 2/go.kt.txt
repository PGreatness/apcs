//Ahnaf Hasan
//APCS2 pd08
//HW12 -- __+3R|\/|1|\|4|_  1|_|_|\|3$$__ 
//2018-03-1

Q0: What do you make of the multiple class definitions in a single .java file?
Q1: How are the command line arguments processed?
Q2: What happens if no command line arguments are given?
Q3: What is the nature/purpose of the recursion? Is it necessary for the animation?
Q4: What do you expect to see when you run it?
Q5: How long do you expect it to run?
Q6: What does ANSI stand for? (You are permitted some intertubes searching here…). What is it good for?
Q7: How did your expectations compare to your observations?
Q8: How might you adapt this framework to animate a probing for a Knight’s Tour?

A0: As long as there isn't a protection to the wrapper class, it seemed ok.
A1: The first argument makes a board that exclude the moat and the second argument
sets how long before the board changes.
A2: The default from the constructor is given.
A3: Yes because the recursion causes the board to change.
A4: The screen will continuously refresh as random numbers spawn in from the 0s
designating the actual board.
A5: This shouldn't take more than a minute without arguments but the time can be
changed freely by inputting the largest number ints can store.
A6: American National Standards Institute, who makes all the standards that are
apparently followed in C.
A7: I expected many print outs to be done like we normally have, however, this
surprised me as it was truely animated.
A8: The knight could be made to move as a chess piece instead of clunkily updating
its position with every recursive call.

x+2 = The algorithm still is the same. Start at the corner and work your way around
the entire board and slowly probe the center. However, after talking with Aidan, I
realized that keeping track of the places that the knight has been in an expandable
array might prove useful in the long run.